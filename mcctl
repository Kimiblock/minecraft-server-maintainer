#!/bin/bash

######Function Start######
#Store download urls
function getUrl(){
    echo "[Info] Finding url"
}
#Open eula website
function openEula(){
    xdg-open --version 1>/dev/null 2>/dev/null
    if [[ $? = 0 ]]; then
        echo '[Info] Opening eula page or manually visit https://account.mojang.com/documents/minecraft_eula'
        screenName=eulaTemp screenCommand="xdg-open 'https://account.mojang.com/documents/minecraft_eula" createScreen
    else
        echo '[Warn] Please read the eula from mojang, please read eula from Mojang(https://account.mojang.com/documents/minecraft_eula)'
    fi
}

#Accept Eula
function acceptEula(){
    if [[ ${flagsInput} =~ 'unattended' ]]; then
        echo '[Warn] Please read the eula from mojang, please read eula from Mojang(https://account.mojang.com/documents/minecraft_eula)'
        echo 'eula=true' >${serverPath}/eula.txt
    else
        openEula
        unset confirm
        read -p "[Warn] Enter 'Y' to proceed or any other key to cancel" confirm
        if [ ${confirm} = Y ]; then
            echo '[Info] Accepting eula'
            echo 'eula=true' >${serverPath}/eula.txt
        else
            echo "[Info] Detected cancel key: ${confirm}"
        fi
    fi
}

#Use Chromedriver to download
function chromedriverDownload(){
    echo '[Warn] You must install mcctl to system first'
    echo '[Warn] This download method requires a X display'
    echo '[Warn] If you connect server via ssh, install xorg-xserver and add -Y argument to your ssh command'
    echo '[Warn] This argument will enable X11 forwarding, make sure you enabled it in ssh config!'
    python3 /opt/mcctl/resources/chromedriver.py ${url}
    if [ -f '~/下载/*.crdownload' ]; then #Detect Chinese environment since some idiot use Chinese as server's primary language
        mv ~/下载/*.crdownload ~/${checkFile}
    else
        mv ~/Downloads/*.crdownload ~/${checkFile}
        mv ~/Download/*.crdownload ~/${checkFile}
    fi
}

#Install webdriver
function instWebdriver(){
    detectPackageManager
    if [ ${packageManager} = 'pacman' ]; then
        sudo pacman -Sy
        sudo pacman -S python-pip chromium --noconfirm --needed
    elif [ ${packageManager} = 'apt' ]; then
        sudo apt update
        sudo apt install python3-pip chromium -y
    elif [ ${packageManager} = 'dnf' ]; then
        sudo dnf update
        sudo dnf install python3-pip chromium -y
    fi
    pip show undetected-chromedriver 1>/dev/null 2>/dev/null
    if [[ $? = 1 ]]; then
        echo '[Info] Installing chromedriver'
        pip install undetected-chromedriver==3.1.5 1>/dev/null
    else
        echo '[Info] Updating chromedriver'
        pip install undetected-chromedriver==3.1.5 1>/dev/null
    fi
    while [[ $? = 1 ]]; do
        echo '[Warn] Retrying install chromedriver'
        pip install undetected-chromedriver==3.1.5 1>/dev/null
    done
}

#Install resources to opt
function instResource(){
    if [[ ${flagsInput} =~ 'archlinux' ]]; then
        echo '[Info] Installing resources'
        mkdir -p ${pkgdir}/opt/mcctl
        mv resources ${pkgdir}/opt/mcctl/
        rm -f ${pkgdir}/opt/mcctl/resources/demo.png
        echo '[Info] Installed resources to /opt/mcctl'
    else
        echo '[Info] Installing resources'
        sudo rm -rf /opt/mcctl 2>/dev/null
        sudo mkdir -p /opt/mcctl
        sudo mv resources /opt/mcctl/
        sudo rm -f /opt/mcctl/resources/demo.png
        echo '[Info] Installed resources to /opt/mcctl'
    fi

}

#Generate a lock file to prevent more than one processes running
function lockFile(){
    if [[ $@ = 'lock' ]]; then
        echo '[Info] Creating lock file'
        touch ~/.mcctl.lock 2>/dev/null
        chmod 600 ~/.mcctl.lock 2>/dev/null
    fi
    if [[ $@ = 'check' ]]; then
        if [ -f '~/.mcctl.lock' ]; then
            exitScript 14
        fi
    fi
    if [[ $@ = 'unlock' ]]; then
        echo '[Info] Deleting lock file'
        rm -rf ~/.mcctl.lock 2>/dev/null
    fi
}

#Check if using zsh
function checkBash(){
    if [[ ${SHELL} =~ zsh ]]; then
        if [[ ${flagsInput} =~ 'unattended' ]]; then
            echo '[Critical] Skipping shell changing'
        else
            echo '[Warn] You are using zsh as default shell, please change your default shell to bash or you might encounter problems with screen'
        fi
    elif [[ ${SHELL} =~ bash ]]; then
        echo "[Info] You are using ${SHELL}"
    else
        echo '[Warn] Switch to bash ASAP'
    fi
}

#Read configurations from  >~/.config/mcctl/mcctl.conf
function readConf(){
    if [ -f ~/.config/mcctl/mcctl.conf ]; then
        echo '[Info] mcctl config file detected'
    else
        echo "[Warn] Configuration file missing"
    fi
    if [[ $@ =~ 'env' ]]; then
        export serverPath=`cat ~/.config/mcctl/mcctl.conf | grep serverPath= | cut -c 12-`
        export version=`cat ~/.config/mcctl/mcctl.conf | grep version= | cut -c 9-`
    fi
    if [[ $@ =~ 'flags' ]]; then
        export flagsInput=`cat ~/.config/mcctl/mcctl.conf | grep flags= | cut -c 7-`
    fi
}

#Create conf
function createConf(){
    echo '[Info] Creating config file'
    mkdir -p ~/.config/mcctl
    touch mcctl.conf
}

#Save configuration to  >~/.config/mcctl/mcctl.conf
function saveConfig(){
    if [ -f ~/.config/mcctl/mcctl.conf ]; then
        echo '[Info] mcctl config file detected'
    else
        createConf
    fi
    echo "[Info] Overriding config"
    rm ~/.config/mcctl/mcctl.conf
    echo "serverPath=${serverPath}" >>~/.config/mcctl/mcctl.conf
    echo "version=${version}" >>~/.config/mcctl/mcctl.conf
    echo "flags=${flagsInput}" >>~/.config/mcctl/mcctl.conf
}

#Detect installed files
function detectInstalledFiles(){
    echo '[Info] Detecting installed files'
    for env in paperInstalled mojangInstalled spigotInstalled floodgateInstalled geyserInstalled mtvehiclesInstalled sacInstalled huskhomesInstalled; do
        unset ${env}
    done
    unset env
    if [ -f ${serverPath}/paper-*.jar ]; then
        paperInstalled=true
        mv ${serverPath}/paper-*.jar ${serverPath}/Paper-latest.jar 2>/dev/null
        updateFlags="${updateFlags} paper"
    elif [ -f ${serverPath}/Paper-latest.jar ]; then
        paperInstalled=true
        updateFlags="${updateFlags} paper"
    fi
    if [ -f ${serverPath}/server.jar ]; then
        mojangInstalled=true
        mv ${serverPath}/server.jar ${serverPath}/Minecraft-latest.jar 2>/dev/null
        updateFlags="${updateFlags} mojang"
    elif [ -f ${serverPath}/Minecraft-latest.jar ]; then
        mojangInstalled=true
        updateFlags="${updateFlags} mojang"
    fi
    if [ -f ${serverPath}/Spigot-latest.jar ]; then
        spigotInstalled=true
        updateFlags="${updateFlags} spigot"
    elif [ -f ${serverPath}/spigot-*.jar ]; then
        spigotInstalled=true
        mv ${serverPath}/spigot-*.jar ${serverPath}/Spigot-latest.jar 2>/dev/null
        updateFlags="${updateFlags} spigot"
    fi
    if [ -f ${serverPath}/plugins/floodgate-spigot.jar ]; then
        floodgateInstalled=true
        updateFlags="${updateFlags} floodgate"
    fi
    if [ -f ${serverPath}/plugins/Geyser-Spigot.jar ]; then
        geyserInstalled=true
        updateFlags="${updateFlags} geyser"
    fi
    if [ -f ${serverPath}/plugins/MTVehicles.jar ]; then
        mtvehiclesInstalled=true
        updateFlags="${updateFlags} mtvehicles"
    fi
    if [ -f ${serverPath}/plugins/SoaromaSAC*.jar ]; then
        mv ${serverPath}/plugins/SoaromaSAC*.jar ${serverPath}/plugins/SoaromaSAC.jar 2>/dev/null
        sacInstalled=true
        updateFlags="${updateFlags} sac"
    fi
    if [ -f ${serverPath}/plugins/HuskHomes*.jar ]; then
        mv ${serverPath}/plugins/HuskHomes*.jar ${serverPath}/plugins/HuskHomes.jar 2>/dev/null
        huskhomesInstalled=true
        updateFlags="${updateFlags} huskhomes"
    fi
    if [[ ${paperInstalled} = 'true' ]]; then
        echo "[Info] Paper detected"
    elif [[ ${spigotInstalled} = 'true' ]]; then
        echo "[Info] Spigot detected"
    elif [[ ${mojangInstalled} = 'true' ]]; then
        echo "[Info] Mojang server detected"
    fi
}

#Merge BuildTools log to script log
function mergeBuildToolsLog(){
    echo '[Info] BuildTools log start'
    cat BuildTools.log.txt
    echo '[Info] BuildTools log end'
    rm -f BuildTools.log.txt
}

#Print copyright
function printCopyright(){
    echo '[Info] This script is written by Kimiblock.'
}

#removeScript
function uninstallService(){
    checkServiceFileInstalled
    if [ ${service} = enabled ]; then
        sudo systemctl disable --now mcctl.service
        sudo rm -rf /etc/systemd/system/mcctl.service
    elif [ ${service} = disabled ]; then
        sudo rm -rf /etc/systemd/system/mcctl.service
    else
        echo "[Warn] mcctl.service doesn't exist"
    fi
}

#Check installed
function checkScriptInstalled(){
    echo '[Info] Checking if you have mcctl installed'
    if [ -f /usr/bin/mcctl ]; then
        echo '[Info] mcctl detected and installed'
    else
        echo '[Info] mcctl missing, press Enter to install or any other key to abort'
        unset confirm
        read confirm
        if [ ! ${confirm} ]; then
            installScript
        else
            exitScript 13
        fi
    fi
}

#Check service file installed
function checkServiceFileInstalled(){
    echo '[Info] Checking if you have mcctl service installed'
    if [ -f /etc/systemd/system/mcctl.service ]; then
        echo '[Info] mcctl service detected and start at boot disabled'
        service=disabled
    elif [ -f /etc/systemd/system/multi-user.target.wants/mcctl.service ]; then
        echo '[Info] mcctl service detected and start at boot enabled'
        service=enabled
    else
        echo '[Info] mcctl service missing'
        service=no
    fi
}


#Install script
function installScript(){
    if [[ ${flagsInput} =~ 'archlinux' ]]; then
        echo '[Info] Downloading script'
        rm -rf mcctl 2>/dev/null
        git clone https://github.com/Kimiblock/mcctl.git
        if [ ! $? = 0 ]; then
            exitScript 11
        fi
        echo '[Info] Installing script'
        cd mcctl
        instResource
        sudo mkdir -p /usr/bin
        sudo mv mcctl ${pkgdir}/usr/bin
        sudo chmod +x ${pkgdir}/usr/bin/mcctl
        echo '[Info] Script installed and updated'
    else
        echo '[Info] Downloading script'
        rm -rf mcctl 2>/dev/null
        git clone https://github.com/Kimiblock/mcctl.git 2>/dev/null 1>/dev/null
        if [ ! $? = 0 ]; then
            exitScript 11
        fi
        echo '[Info] Installing script, asking root permission'
        pathPrevious=`pwd`
        cd mcctl
        instResource
        #instWebdriver
        #mv mcctl.sh mcctl
        sudo mv mcctl /usr/bin
        if [ ! $? = 0 ]; then
            exitScript 12
        fi
        sudo chmod +x /usr/bin/mcctl
        if [ ! $? = 0 ]; then
            exitScript 12
        fi
        cd ${pathPrevious}
        rm -rf mcctl
        echo '[Info] Script installed and updated'
    fi
}

#Uninstall script
function uninstallScript(){
    echo '[Info] Uninstalling mcctl from your system'
    sudo rm -rf /usr/bin/mcctl
    echo '[Info] Uninstalled mcctl from your system'

}

#Create service file
function createStartupService(){
    checkSystemd
    flags=`echo $@ | cut -c 10-`
    echo '[Info] Creating service file'
    echo """
[Unit]
Description=minecraft-server-control's start module
[Service]
ExecStart=env version=${version} serverPath=${serverPath} mcctl ${flags}
[Install]
WantedBy=multi-user.target
    """ >mcctl.service
    sleep 3s
    if [ ! ${EDITOR} ]; then
        nano mcctl.service
    else
        ${EDITOR} mcctl.service
    fi
    echo "[Info] Type 'Confirm' to confirm or any other key to cancel"
    read checkConfirm
    if [ ${checkConfirm} = 'Confirm' ]; then
        sudo mv mcctl.service /etc/systemd/system/
        sudo systemctl enable mcctl.service
    else
        echo '[Info] Cancelled'
    fi
}

#Check systemd function
function checkSystemd(){
    echo '[Info] Checking if you have systemd installed'
    systemctl --version 1>/dev/null 2>/dev/null
    if [ $? = 127 ]; then
        exitScript 10
    elif [ $? = 0 ]; then
        echo '[Info] Systemd installed and functioned correctly'
    else
        echo "[Warn] Systemd installed but returned an error code $?"
    fi
}

#Install prerequests
function installRequirements(){
    echo '[Info] Installing requirements'
    detectPackageManager
    if [ ${packageManager} = 'pacman' ]; then
        sudo pacman -S jre-openjdk-headless jdk8-openjdk git screen wget --noconfirm --needed
    elif [ ${packageManager} = 'apt' ]; then
        sudo apt install -y default-jdk screen wget openjdk-8-jre-headless
    elif [ ${packageManager} = 'dnf' ]; then
        echo "[Critical] dnf not supported"
        exitScript 9
    fi
    echo '[Info] Finished installing requirements'
}

#Check Screen
function checkScreen(){
    echo '[Info]Checking if you have already installed screen'
    screen --version 2>/dev/null
    if [[ $? =~ 127 ]]; then
        exitScript 8
    fi
}

#Create Screen
function createScreen(){
    echo "[Info] Creating new screen ${screenName}.${screenId}"
    screen -dmS ${screenName}
    screenId=`screen -ls | grep .${screenName} | awk '{print $1}' | cut -d "." -f 1`
    screen -x ${screenId} -p 0 -X stuff "${screenCommand}"
    screen -x ${screenId} -p 0 -X stuff '\r'
    echo '[Info] Screen created'
}



#Clean leftovers
function cleanFile(){
    if [[ $@ =~ 'buildTools' ]]; then
        echo '[Info] Cleaning Spigot leftovers'
        for trash in 'apache-maven-3.6.0' 'BuildData' 'Bukkit' 'CraftBukkit' 'Spigot' 'work'; do
            rm -fr ${trash} 1>/dev/null 2>/dev/null
        done
    unset trash
    fi
    if [[ $@ =~ 'log' ]]; then
        echo '[Info] Cleaning logs'
        for logFiles in 'mcctl.log' 'BuildTools.log.txt' 'wget-log' 'mcctl_debug.log'; do
            rm -f ${logFiles}
        done
        unset logFiles
    fi
    if [[ $@ =~ unattended ]]; then
        echo '[Info] Skipping config file in ~/.config'
    else
        unset confirm
        read -p '[Warn] Do you want to completely delete mcctl configs?[y/n]: ' confirm
        if [ ${confirm} = y ]; then
            rm -rf ~/.config/mcctl
        fi
    fi

}

#Exit script
function exitScript(){
    if [ $@ = 0 ]; then
    exit $@
    else
        echo '[Critical] Exit code detected!'
        echo "Exit code: $@ "
        echo '[Critical] You may follow the instructions to debug'
        if [[ $@ = 1 ]]; then
            sign='Unknown error'
        elif [[ $@ = 2 ]]; then
            sign='Can not create directory'
        elif [[ $@ = 3 ]]; then
            sign='Non-64-bit system detected'
        elif [[ $@ = 4 ]];then
            sign='Environment variables not set'
        elif [[ $@ = 5 ]]; then
            sign='System update failed'
        elif [[ $@ = 6 ]]; then
            sign='BuildTools failed to start'
        elif [[ $@ = 7 ]]; then
            sign='No jar file detected'
        elif [[ $@ = 8 ]]; then
            sign='Screen not installed'
        elif [[ $@ = 9 ]]; then
            sign='Package manager not supported'
        elif [[ $@ = '10' ]]; then
            sign='Systemd missing'
        elif [[ $@ = '11' ]]; then
            sign='Network unrechable'
        elif [[ $@ = 12 ]]; then
            sign='Permission denied'
        elif [[ $@ = 13 ]]; then
            sign='User cancelled'
        elif [[ $@ = 14 ]]; then
            sign="mcctl lock file found, make sure you doesn't run another mcctl process"
        elif [[ $@ = 15 ]]; then
            sign="Exit code from minecraft detected"
        elif [[ ! $@ ]]; then
            sign='Internal error'
        else
            sign="Undefined error code"
        fi
        echo "[Critical] ${sign}"
        echo '[Critical] Exitting...'
        unset ${sign}
        exit $@
    fi
}

#Create folders for the first time
function createFolder(){
    if [ ! -d ${serverPath} ]; then
        echo '[Info] Path to server is empty, creating new directory'
        mkdir -p ${serverPath}
        mkdir -p ${serverPath}/plugins
        if [ $? = 1 ]; then
        echo '[Info] mkdir returned error code 1, retrying with sudo'
            if [ $@ =~ 'unattended' ]; then
                echo '[Warn] unattended flag detected.'
                exitScript 2
            else
                if [ `whoami` = root ]; then
                    exitScript 2
                else
                    sudo mkdir -p ${serverPath}/plugins
                fi
            fi
        fi
        echo '[Info] Directory created.'
    else
        echo '[Info] Directory already exists'
    fi
    if [ ! -d ${serverPath}/plugins ]; then
        echo '[Info] Plugins folder not found, trying to create'
        mkdir -p ${serverPath}/plugins
        if [ $? = 1 ]; then
            echo '[Info] mkdir failed, trying with root'
            if [[ $@ =~ 'unattended' ]]; then
                sudo mkdir -p ${serverPath}/plugins
            else
                echo '[Warn] unattended flag detected'
                exitScript 2
            fi
            if [ $? = 1 ]; then
                echo '[Warn] Plugins folder cannot be created'
                exitScript 2
            fi
        fi
    else
        echo '[Info] Directory already exists'
    fi
}

#Build origin server
function buildMojang(){
    if [ ${version} = 1.19 ]; then
        url=https://launcher.mojang.com/v1/objects/e00c4052dac1d59a1188b2aa9d5a87113aaf1122/server.jar
    fi
    curl -O ${url}
    mv server.jar Minecraft-latest.jar
    update Minecraft-latest.jar
}

#Build Spigot
function buildSpigot(){
    url="https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar"
    checkFile='BuildTools.jar'
    echo "[Info] Downloading BuildTools for Spigot..."
    curl -O ${url}
    echo "[Info] Running BuildTools.jar"
    if [ ${_verbose} = 1 ]; then
        java -jar ${checkFile} nogui --rev ${version}
    else
        java -jar ${checkFile} nogui --rev ${version} >/dev/null 2>/dev/null
    fi
    if [ ! $? = 0 ]; then
        exitScript 6
    fi
    rm -rf ${checkConfig}
    mv spigot-*.jar Spigot-latest.jar
    update Spigot-latest.jar
}

#testPackageManager
function detectPackageManager(){
    echo "[Info] Detecting package manager..."
    if [[ $@ =~ 'nosudo' ]]; then
        if [[ $(apt install ) ]]; then
            echo '[Info] Detected apt'
            packageManager='apt'
        elif [[ $(pacman -h ) ]]; then
            echo '[Info] Detected pacman'
            packageManager='pacman'
        elif [[ $(dnf install ) ]]; then
            echo '[Info] Detected dnf'
            packageManager='dnf'
        else
            packageManager='unknown'
        fi
    else
        if [[ $(sudo apt install ) ]]; then
            echo '[Info] Detected apt'
            packageManager='apt'
        elif [[ $(sudo pacman -h ) ]]; then
            echo '[Info] Detected pacman'
            packageManager='pacman'
        elif [[ $(sudo dnf install ) ]]; then
            echo '[Info] Detected dnf'
            packageManager='dnf'
        else
            packageManager='unknown'
        fi
    fi
}
#checkConfig
checkConfig(){
    checkBash
    if [ ! ${version} ]; then
        exitScript 4
    fi
    if [ ! ${serverPath} ]; then
        exitScript 4
    fi
    if [ ! $build ]; then
        export build=400
    fi
}
#removeJarFile
function clean(){
    echo "[Info] Cleaning"
    rm -rf *.jar 1>/dev/null 2>/dev/null
    rm -rf *.check 1>/dev/null 2>/dev/null
    rm -rf *.1 1>/dev/null 2>/dev/null
    rm -rf *.2 1>/dev/null 2>/dev/null
}
#moveFile
function update(){
    echo "[Info] Updating jar file..."
    if [[ $@ = "Paper-latest.jar" ]]; then
        mv $@ ${serverPath}
    elif [[ $@ = "Spigot-latest.jar" ]]; then
        mv $@ ${serverPath}
    elif [[ $@ = "Minecraft-latest.jar" ]]; then
        mv $@ ${serverPath}
    else
        mv $@ ${serverPath}/plugins
    fi
}
#versionCompare
function versionCompare(){
    echo "[Info] Making sure you're up to date."
    if [ $isPlugin = true ]; then
        checkPath="${serverPath}/plugins"
    else
        checkPath="${serverPath}"
    fi
    diff -q "${checkPath}/${checkFile}" "${checkFile}" >/dev/null 2>/dev/null
    return $?
}
#integrityProtect
function integrityProtect(){
    echo "[Info] Checking file integrity."
    if [[ $@ =~ "unsafe" ]]; then
        echo "[Warn] Default protection disabled. USE AT YOUR OWN RISK!"
        return 0
    else
        echo "[Info] Verifing ${checkFile}"
        #if [ ${isPlugin} = false ]; then
        #    checkFile=Paper-latest.jar
        #    wget $url >/dev/null 2>/dev/null
        #    mv paper-*.jar Paper-latest.jar.check
        #    diff -q Paper-latest.jar.check Paper-latest.jar >/dev/null 2>/dev/null
        #    return $?
        #else
        #    mv $checkFile "${checkFile}.check"
        #    wget $url >/dev/null 2>/dev/null
        #    diff -q $checkFile "${checkFile}.check" >/dev/null 2>/dev/null
        #    return $?
        #fi
        mv ${checkFile} ${checkFile}.check
        wget ${url} >/dev/null 2>/dev/null
        if [ -f paper-*.jar ]; then
            mv paper-*.jar Paper-latest.jar
        elif [ -f server*.jar ]; then
            mv server.jar Minecraft-latest.jar
        elif [ -f SoaromaSAC-*.jar ]; then
            mv SoaromaSAC-*.jar SoaromaSAC.jar
        fi
        unset different
        diff -q ${checkFile} ${checkFile}.check
        different=$?
    fi
    if [ ${different} = 1 ]; then
        echo "[Warn] Checking job done, repairing ${checkFile}."
        redownload
    elif [ ${different} = 0 ]; then
        echo "[Info] Ckecking job done, ${ckeckFile} verified."
        rm -rf *.check
    fi
}
function redownload(){
    clean
    if [ ${isPlugin} = false ]; then
        checkFile=Paper-latest.jar
        wget $url >/dev/null 2>/dev/null
        mv paper-*.jar Paper-latest.jar
        integrityProtect
    else
        wget $url >/dev/null 2>/dev/null
        integrityProtect
    fi
}
#pluginUpdate
function pluginUpdate(){
    echo "[Info] Updating ${checkFile}"
    if [ $@ = Floodgate ]; then
        pluginName="$@"
        url="https://ci.opencollab.dev/job/GeyserMC/job/Floodgate/job/master/lastSuccessfulBuild/artifact/spigot/target/floodgate-spigot.jar"
    elif [ $@ = Geyser ]; then
        pluginName="$@"
        url="https://ci.opencollab.dev/job/GeyserMC/job/Geyser/job/master/lastSuccessfulBuild/artifact/bootstrap/spigot/target/Geyser-Spigot.jar"
    else
        echo "[Warn] Sorry, but we don't have your plugin's download url. Please wait for support~"
    fi
    echo "[Info] Downloading ${pluginName}"
    wget $url >/dev/null 2>/dev/null
    isPlugin=true
}
#systemUpdate
function systemUpdate(){
    if [[ $@ =~ 'nosudo' ]]; then
        if [ ${packageManager} = apt ]; then
            echo "[Info] Updating using apt..."
            apt -y full-upgrade
        elif [ ${packageManager} = dnf ]; then
            echo "[Info] Updating using dnf..."
            dnf -y update
        elif [ ${packageManager} = pacman ]; then
            echo "[Info] Updating using pacman..."
            pacman --noconfirm -Syyu
        else
            unset packageManager
            echo "[Critical] Package manager not found!"
            exitScript 5
        fi
    else
        if [ ${packageManager} = apt ]; then
            echo "[Info] Updating using apt..."
            sudo apt -y full-upgrade
        elif [ ${packageManager} = dnf ]; then
            echo "[Info] Updating using dnf..."
            sudo dnf -y update
        elif [ ${packageManager} = pacman ]; then
            echo "[Info] Updating using pacman..."
            sudo pacman --noconfirm -Syyu
        else
            unset packageManager
            exitScript 5
        fi
    fi
}

#buildPaper
function buildPaper(){
    while [ ! -f paper-*.jar ]; do
        export build=`expr ${build} - 1`
        echo "[Info] Testing build ${build}"
        url="https://papermc.io/api/v2/projects/paper/versions/${version}/builds/${build}/downloads/paper-${version}-${build}.jar"
        wget $url >/dev/null 2>/dev/null
    done
    echo "[Info] Downloaded build ${build}."
    if [ -f paper-*.jar ]; then
        mv paper-*.jar Paper-latest.jar
    fi
    export isPlugin=false
    export checkFile=Paper-latest.jar
    integrityProtect
    versionCompare
    if [ $? = 0 ]; then
        echo "[Info] You're up to date."
        clean
    else
        echo "[Info] Updating Paper..."
        update Paper-latest.jar
    fi
    clean
}

#32-bit Warning
function checkBit(){
    getconf LONG_BIT >/dev/null 2>/dev/null
    return $?
    if [ $? = 64 ]; then
        echo "[Info] Running on 64-bit system."
    elif [ $? = 32 ]; then
        if [[ $@ =~ "unsafe" ]]; then
            echo "[Warn] Running on 32-bit system may encounter unexpected problems."
        else
            exitScript 3
        fi
    fi
}

function updateMain(){
    echo "[Info] Starting auto update at `date`"
    cd ${serverPath}/Update/
    if [[ $@ =~ "paper" ]]; then
        buildPaper
    fi

    if [[ $@ =~ "spigot" ]]; then
        buildSpigot
    fi

    if [[ $@ =~ 'mojang' ]]; then
        buildMojang
    fi
    if [[ $@ =~ "mtvehicles" ]]; then
        url='https://www.spigotmc.org/resources/mtvehicles-vehicle-plugin-free-downloadable.80910/download?version=456797' checkFile='MTVehicles.jar' chromedriverDownload
        update MTVehicles.jar
        clean
    fi

    if [[ $@ =~ "geyser" ]]; then
        export isPlugin=true
        pluginUpdate Geyser
        export checkFile='Geyser-Spigot.jar'
        integrityProtect
        versionCompare
        update Geyser-Spigot.jar
        clean
    fi

    if [[ $@ =~ "floodgate" ]]; then
        export isPlugin=true
        export checkFile='floodgate-spigot.jar'
        pluginUpdate Floodgate
        integrityProtect
        versionCompare
        update floodgate-spigot.jar
        clean
    fi

    if [[ $@ =~ "sac" ]]; then
        echo "[Warn] Warning! Beta support for SoaromaSAC"
        checkFile=SoaromaSAC.jar url='https://www.spigotmc.org/resources/soaromasac-lightweight-cheat-detection-system.87702/download?version=459815' chromedriverDownload
        update SoaromaSAC.jar
    fi


    if [[ $@ =~ 'clean' ]]; then
        cleanFile -buildTools
        cleanFile -logFiles
    fi
    ######Plugin Update End######
    if [[ $@ =~ 'system' ]]; then
        detectPackageManager $@
        systemUpdate $@
    fi
    #rm -rf ${serverPath}/plugins/BuildTools.jar #Due to a unknown bug
    clean
    echo "[Info] Job finished at `date`, have a nice day~"
    exitScript 0
}

#Start Minecraft server
function startMinecraft(){
    lockFile unlock
    echo '[Info] Attempting to start Minecraft server'
    if [[ $@ =~ 'd' ]]; then
        checkScreen
    fi
    if [ ! -f ${serverPath} *-latest.jar ]; then
        exitScript 7
    fi
    if [[ $@ =~ 'spigot' ]]; then
        if [ -f ${serverPath}/spigot-*.jar ]; then
            mv ${serverPath}/spigot-*.jar ${serverPath}/Spigot-latest.jar
        fi
        cd ${serverPath}
        if [[ $@ =~ 'd' ]]; then
            screenName='spigot' screenCommand='java -jar Spigot-latest.jar nogui' createScreen
        else
            java -jar Spigot-latest.jar
        fi
    elif [[ $@ =~ 'paper' ]]; then
        if [ -f ${serverPath}/paper-*.jar ]; then
            mv ${serverPath}/paper-*.jar ${serverPath}/Paper-latest.jar
        fi
        cd ${serverPath}
        if [[ $@ =~ 'd' ]]; then
            screenName='paper' screenCommand='java -jar Paper-latest.jar nogui' createScreen
        else
            java -jar Paper-latest.jar
        fi
    elif [[ $@ =~ 'mojang' ]]; then
        if [ -f ${serverPath}/server.jar ]; then
            mv ${serverPath}/server.jar ${serverPath}/Minecraft-latest.jar
        fi
        cd ${serverPath}
        if [[ $@ =~ 'd' ]]; then
            screenName='minecraft' screenCommand='java -jar Minecraft-latest.jar nogui' createScreen
        else
            java -jar Minecraft-latest.jar
        fi
    fi
    if [[ $? = 0 ]]; then
        echo '[Info] Minecraft exited'
    else
        exitScript 15
    fi
    lockFile lock
}

function processFlags(){
    flagsInput=$@
    if [[ ${flagsInput} =~ 'verbose' ]]; then
        echo '[Info] Verbose mode is on'
        export _verbose=1
    fi
    if [[ ${flagsInput} =~ 'force-unlock' ]]; then
        lockFile unlock
    fi
    lockFile check
    lockFile lock
    if [[ ${flagsInput} =~ 'save-conf' ]]; then
        saveConfig
    fi
    if [[ $@ =~ 'create-conf' ]]; then
        createConf
    fi
    if [[ $@ = 'currentdirectory' ]]; then
        serverPath=`pwd`
    fi
    if [[ $@ =~ 'latest' ]]; then
        version=1.19
    fi
}
######Function End######
processFlags
if [[ ! $@ ]]; then
    echo '[Info] No options detected! Trying to read saved settings'
    unset flagsInput
    readConf flags
fi
if [ ! ${serverPath} ]; then
    readConf env
fi
if [ ! ${version} ]; then
    readConf env
fi
echo "[Info] Hello! `whoami` at `date`"
printCopyright
checkBit
echo "[Info] Reading settings"
clean 1>/dev/null 2>/dev/null
checkConfig
if [[ ${flagsInput} =~ 'install' ]]; then
    installScript
    exit 0
fi
if [[ $@ =~ 'newserver' ]]; then
    createFolder $@
    acceptEula
fi
if [[ ${flagsInput} =~ 'remove' ]]; then
    uninstallScript
    uninstallService
fi
if [[ ${flagsInput} =~ 'autostart' ]]; then
    createStartupService ${flagsInput}
    exit 0
fi
if [[ ${flagsInput} =~ "instreq" ]]; then
    installRequirements ${flagsInput}
fi
if [[ ${flagsInput} =~ 'update' ]]; then
    if [[ ${flagsInput} =~ autodetect ]]; then
    detectInstalledFiles
        if [[ ${flagsInput} =~ "unattended" ]]; then
            updateMain ${flagsInput} -nosudo ${updateFlags}
            mergeBuildToolsLog
        else
            updateMain ${flagsInput} ${updateFlags}
        fi
    else
        if [[ ${flagsInput} =~ "unattended" ]]; then
            updateMain ${flagsInput} -nosudo
            mergeBuildToolsLog
        else
            updateMain ${flagsInput}
        fi
    fi
fi

if [[ ${flagsInput} =~ clean ]]; then
    cleanFile buildTools
    cleanFile log
fi

if [[ ${flagsInput} =~ startminecraft ]]; then
    if [[ ${flagsInput} = 'unattended' ]]; then
        startMinecraft ${flagsInput} d
    else
        startMinecraft ${flagsInput}
    fi
fi
lockFile unlock
